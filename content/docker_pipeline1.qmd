---
title: "🐳 Running Pipeline1 with Docker"
format: html
toc: true
number-sections: true
---


## 📦 What Is This?

This guide explains how to build and run the `pipeline1` container for the ChIP-seq Modular Analysis Pipeline using Docker. It is beginner-friendly and reproducible.

---

## ✅ Prerequisites

Make sure you have:

- [Docker installed](https://docs.docker.com/get-docker/)
- A terminal open in the **project root** (`chip-seq-modular-pipeline/`)

---

## 🏗️ Step 1: Build the Docker Image

From the **project root**, run:

```bash
docker build -f Docker/Dockerfile.pipeline1 -t pipeline1-test .
````

Where:

* `-f` tells Docker which file to use
* `-t pipeline1-test` names the image
* `.` sets the build context (your entire repo)

> ⏱️ First-time builds may take several minutes.

---

## 📁 Step 2: Folder Structure

To ensure correct volume mounting inside the container, organize your folders like this:

| Host Folder         | Container Mount              | Description                       |
| ------------------- | ---------------------------- | --------------------------------- |
| `samples/`          | `/pipeline/samples`          | Raw sequencing input              |
| `Reference/`        | `/pipeline/Reference`        | Genome reference files            |
| `SpikeinReference/` | `/pipeline/SpikeinReference` | Spike-in configs                  |
| `metadata/`         | `/pipeline/metadata`         | Sample metadata and mapping files |
| `templates/`        | `/pipeline/templates`        | YAML/TSV configuration templates  |
| `adapters/`         | `/pipeline/adapters`         | Adapter files for trimming        |
| `assets/`           | `/pipeline/assets`           | Icons, logos, images, PDFs, etc.  |
| `modules/`          | `/pipeline/modules`          | Pipeline logic and scripts        |
| `results/`          | `/pipeline/results`          | Output from pipeline1             |
| `analysis/`         | `/pipeline/analysis`         | Output passed to pipeline2        |

> 🛠️ Docker will auto-create `results/` and `analysis/` if they don't exist.

---

## ▶️ Step 3: Run the Pipeline (Default)

To run the default pipeline with standard parameters:

```bash
docker run --rm -it \
  -v "$PWD/samples:/pipeline/samples" \
  -v "$PWD/Reference:/pipeline/Reference" \
  -v "$PWD/SpikeinReference:/pipeline/SpikeinReference" \
  -v "$PWD/metadata:/pipeline/metadata" \
  -v "$PWD/templates:/pipeline/templates" \
  -v "$PWD/adapters:/pipeline/adapters" \
  -v "$PWD/assets:/pipeline/assets" \
  -v "$PWD/modules:/pipeline/modules" \
  -v "$PWD/results:/pipeline/results" \
  -v "$PWD/analysis:/pipeline/analysis" \
  pipeline1-test bash run_pipeline1.sh
```

---

## ⚙️ Step 4: Run with Custom Options

Example with flags for genome, adapter, platform, and threads:

```bash
docker run --rm -it \
  -v "$PWD/samples:/pipeline/samples" \
  -v "$PWD/Reference:/pipeline/Reference" \
  -v "$PWD/SpikeinReference:/pipeline/SpikeinReference" \
  -v "$PWD/metadata:/pipeline/metadata" \
  -v "$PWD/templates:/pipeline/templates" \
  -v "$PWD/adapters:/pipeline/adapters" \
  -v "$PWD/assets:/pipeline/assets" \
  -v "$PWD/modules:/pipeline/modules" \
  -v "$PWD/results:/pipeline/results" \
  -v "$PWD/analysis:/pipeline/analysis" \
  pipeline1-test bash run_pipeline1.sh \
    -t 8 \
    -r mm10 \
    -a tn5_nextera \
    -p IONTORRENT \
    -m metadata/mapping.tsv \
    -f csv
```

---

## 🪛 Troubleshooting & Tips

* ✅ Run Docker **inside** your project folder.
* ✅ Mount `results/` and `analysis/` to keep output.
* 🐞 To debug interactively:

```bash
docker run --rm -it pipeline1-test
```

Then inside the container:

```bash
bash run_pipeline1.sh -t 4 -r hg38
```

---

## 🎯 Next Steps

Once `pipeline1` finishes, you can move to `pipeline2` using `analysis/` as input.

---

## 📂 Output Overview

| Folder      | Description                            |
| ----------- | -------------------------------------- |
| `results/`  | Output results from pipeline1          |
| `analysis/` | Used later as input for `pipeline2`    |
| `logs/`     | (optional) runtime logs if implemented |

---





---
title: "🐳 Running Pipeline2 with Docker"
format: html
toc: true
number-sections: true
---

## 🧪 What Is Pipeline2?

Pipeline2 is the second part of the ChIP-seq modular system. It performs:

- Peak calling (`MACS3` or `HOMER`)
- Reproducibility analysis (`IDR`)
- Annotation and final reporting

It is designed to consume output from **Pipeline1** (`analysis/`) and produce final results in `results/`.

---

## ✅ Requirements

- Docker installed (`docker --version`)
- Pipeline image built (see below)
- Directory structure including:

```

Reference/         # Genome references
metadata/          # Sample and group mapping
templates/         # Configuration files
analysis/          # Output from pipeline1
results/           # New output
tools/, assets/    # Utility scripts and helper data
modules/           # Contains pipeline2 logic

````
------------------------------------------------------------------------

### 📁 2. Project Structure

A typical folder layout:

```         
your_project/
├── run_pipeline2.sh
├── modules/
│   └── pipeline2/
├── metadata/
├── Reference/
├── templates/
├── logs/
├── analysis/           # Will be populated by the pipeline
```

Ensure all these folders exist, especially `Reference/`, `metadata/`, and `modules/`.

------------------------------------------------------------------------
---

## 🏗️ Build the Docker Image

From your project root:

```bash
docker build -f Docker/Dockerfile.pipeline2 -t pipeline2-test .
````

This command builds a Docker image using your latest `Dockerfile.pipeline2`.

---

## 📁 Folder Mounts Summary

| Host Folder  | Container Path    | Purpose                     |
| ------------ | ----------------- | --------------------------- |
| `analysis/`  | `/data/analysis`  | Input from pipeline1        |
| `results/`   | `/data/results`   | Output from pipeline2       |
| `Reference/` | `/data/Reference` | Genome references           |
| `metadata/`  | `/data/metadata`  | Metadata and mapping        |
| `templates/` | `/data/templates` | Pipeline configuration      |
| `modules/`   | `/data/modules`   | Contains pipeline2 logic    |
| `assets/`    | `/data/assets`    | Visual assets and icons     |
| `tools/`     | `/pipeline/tools` | Custom scripts and binaries |

---

## ▶️ Run With Default Options

```bash
docker run --rm -it \
  -v "$PWD/analysis:/data/analysis" \
  -v "$PWD/results:/data/results" \
  -v "$PWD/Reference:/data/Reference" \
  -v "$PWD/metadata:/data/metadata" \
  -v "$PWD/templates:/data/templates" \
  -v "$PWD/modules:/data/modules" \
  -v "$PWD/assets:/data/assets" \
  -v "$PWD/tools:/pipeline/tools" \
  pipeline2-test \
  bash run_pipeline2.sh --caller homer --genome hg38
```

---

## ⚙️ Full Example With Options

```bash
docker run --rm -it \
  -v "$PWD/analysis:/data/analysis" \
  -v "$PWD/results:/data/results" \
  -v "$PWD/Reference:/data/Reference" \
  -v "$PWD/metadata:/data/metadata" \
  -v "$PWD/templates:/data/templates" \
  -v "$PWD/modules:/data/modules" \
  -v "$PWD/assets:/data/assets" \
  -v "$PWD/tools:/pipeline/tools" \
  pipeline2-test \
  bash run_pipeline2.sh \
    --caller macs3 \
    --genome mm10 \
    -t 8 \
    -m metadata/mapping.tsv \
    -f true \
    -c spearman
```

> ✅ `--caller`: choose `macs3` or `homer`
> ✅ `-t`: number of threads
> ✅ `-f`: filtering enabled (`true`/`false`)
> ✅ `-c`: correlation method

---

## 🔍 Dry Run Mode

If your pipeline supports `--dry-run`, test like this:

```bash
bash run_pipeline2.sh --caller homer --dry-run
```

Inside Docker:

```bash
docker run --rm -it pipeline2-test
cd /pipeline && bash run_pipeline2.sh --dry-run
```

---

## 📂 Output

| Folder      | Description                                |
| ----------- | ------------------------------------------ |
| `results/`  | Final peak files, reports, plots           |
| `analysis/` | Used from pipeline1 as source input        |
| `logs/`     | Per-module logs (optional, if implemented) |

---

## 🧼 Troubleshooting

* Make sure your Docker mounts point to actual directories (`ls` to verify).
* Try running Docker without volumes first to debug logic:

  ```bash
  docker run --rm -it pipeline2-test
  bash run_pipeline2.sh --caller homer
  ```

---

## ✅ Next Steps

You can now:

* Validate outputs in `results/`
* View filtered metadata in `metadata/mapping_filtered.tsv`
* Optionally generate a downstream report or visualizations

---


### 🛠️️️ 6. Optional: Helper Shell Script

Create a script like `run.sh`:

``` bash
#!/bin/bash
docker run --rm -it \
  -v "$PWD/analysis:/data/analysis" \
  -v "$PWD/results:/data/results" \
  -v "$PWD/Reference:/data/Reference" \
  -v "$PWD/metadata:/data/metadata" \
  -v "$PWD/templates:/data/templates" \
  -v "$PWD/modules:/data/modules" \
  -v "$PWD/assets:/data/assets" \
  -v "$PWD/tools:/pipeline/tools" \
  pipeline2-test \
  bash run_pipeline2.sh "$@"
```

Then run it like this:

``` bash
chmod +x run.sh
./run.sh --caller homer -genome mm10
```

